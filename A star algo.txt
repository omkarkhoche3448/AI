class Node:

	def __init__(self, f=0, g=999999, h=0, name=0):
		self.f = f
		self.g = g
		self.h = h
		self.name = name

	def setNeighbours(self, neighbours={}):
		self.neighbours = neighbours

graph = [
	[-1,  1, -1, -1, -1, 12],
	[1,  -1,  2,  1, -1, -1],
	[-1,  2, -1, -1,  5, -1],
	[-1,  1, -1, -1,  3,  4],
	[-1, -1,  5,  3, -1,  2],
	[12, -1, -1,  4,  2, -1]
  ]


heuristics = [5,3,4,2,6,0]

s = Node(h=heuristics[0], name=0)
a = Node(h=heuristics[1], name=1)
b = Node(h=heuristics[2], name=2)
c = Node(h=heuristics[3], name=3)
d = Node(h=heuristics[4], name=4)
g = Node(h=heuristics[5], name=5)



s.setNeighbours([a,g])
a.setNeighbours([c, b])
b.setNeighbours([a, d])
c.setNeighbours([a, d, g])
d.setNeighbours([b, c, g])
g.setNeighbours([s, c, d])



startNode = s
goalNode = g


def findNodeWithLowestFScore(openSet):
	fScore = 999999
	node = None
	for eachNode in openSet:
		if eachNode.f < fScore:
			fScore = eachNode.f
			node = eachNode

	return node



def contruct_path(cameFrom, current):

	totalPath = []
	while current in cameFrom.keys():
		current = cameFrom[current]
		totalPath.append(current)

	return totalPath


def astar(start,goal):

	closedSet = set([])
	openSet = set([start])

	cameFrom = {}

	start.g = 0
	start.f = start.h


	while len(openSet)!=0:

		current = findNodeWithLowestFScore(openSet)

		if current==goal:
			return contruct_path(cameFrom, current)

		openSet.remove(current)
		closedSet.add(current)

		#print(current.name, current.f, current.g, current.h)

		for neighbour in current.neighbours:

			#print(neighbour.name, neighbour.f, neighbour.g, neighbour.h)

			if neighbour in closedSet:
				continue

			if neighbour not in openSet:
				openSet.add(neighbour)


			tentative_gScore = current.g + graph[current.name][neighbour.name]
			#print(tentative_gScore)
			if tentative_gScore >= neighbour.g:
				continue

			cameFrom[neighbour] = current
			neighbour.g = tentative_gScore
			neighbour.f = neighbour.g + neighbour.h



	return -1


if __name__=="__main__":


	path = astar(startNode, goalNode)

	print("Path is : ", end="" )
	for node in path[::-1]:
		print(str(node.name) + "-->", end="")
	print(goalNode.name)

	print("\nCost = " + str(goalNode.g))


Path is : 0-->1-->3-->5

Cost = 6


Explaination:

Sure, let's break down the code and understand how it works:

1. Node Class:
   - The `Node` class represents a node in the graph used for the A* algorithm.
   - Each node has attributes `f`, `g`, `h`, and `name`.
     - `f` is the total estimated cost of the path through the node.
     - `g` is the cost from the start node to the current node.
     - `h` is the heuristic cost from the current node to the goal node.
     - `name` is the identifier for the node.
   - The `setNeighbours` method sets the neighbors of the node.

2. Graph Representation:
   - The `graph` variable represents the adjacency matrix of the graph.
   - Each cell `graph[i][j]` contains the cost of the edge between nodes `i` and `j`.
   - If there is no edge between two nodes, the value is `-1`.

3. Heuristics:
   - The `heuristics` list contains heuristic values for each node in the graph.
   - These heuristic values are estimates of the cost from each node to the goal node.

4. Setting Up Nodes and Neighbors:
   - Nodes `s`, `a`, `b`, `c`, `d`, and `g` are created and initialized with heuristic values and names.
   - Neighbors are set for each node according to the provided graph.

5. A* Algorithm:
   - The `astar` function implements the A* algorithm to find the shortest path from the start node to the goal node.
   - It maintains two sets: `openSet` and `closedSet`. `openSet` contains nodes that need to be evaluated, while `closedSet` contains nodes that have already been evaluated.
   - It initializes the start node's `g` and `f` values and adds it to the `openSet`.
   - It iterates until the `openSet` is empty.
   - At each iteration, it selects the node with the lowest `f` score from the `openSet` and evaluates its neighbors.
   - If a better path to a neighbor is found, it updates its `g` and `f` values and adds it to the `openSet`.
   - If the goal node is reached, it reconstructs the path using the `cameFrom` dictionary and returns it.

6. Path Reconstruction and Output:
   - The `contruct_path` function reconstructs the path from the `cameFrom` dictionary.
   - In the `__main__` section, the `astar` function is called with the start and goal nodes, and the resulting path is printed along with its cost.

This code demonstrates the A* algorithm for finding the shortest path in a graph efficiently by considering both the actual cost from the start node and the heuristic cost to the goal node.

A Algorithm* (astar function):
The A* algorithm finds the shortest path from the start node to the goal node.
It initializes two sets: openSet and closedSet.
The openSet contains nodes that need to be evaluated, and the closedSet contains nodes that have already been evaluated.
The algorithm continues until the openSet is empty.
In each iteration, it selects the node with the lowest f score from the openSet (using the findNodeWithLowestFScore function).
For each neighbor of the current node, it calculates the tentative g score (the cost of the current node plus the cost to reach the neighbor).
If the tentative g score is lower than the neighbor's current g score, it updates the neighbor's g score and recalculates its f score.
The algorithm terminates when it reaches the goal node or when the openSet is empty.
Constructing Path (contruct_path function):
This function constructs the path from the start node to the goal node using the cameFrom dictionary, which stores the parent node for each node in the path.

