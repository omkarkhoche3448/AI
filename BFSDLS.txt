 #For BFS:
 #Step 1:Create a graph.
 #Step 2:Make a null adjacency matrix of visited and queue
 #Step 3:Define queue by appending node in visited and queue
 #Step 4:Create a while loop for the queue for popping and printing the nodes which enter the   queue
 #Step 5:Create a for loop to check if neighbor not visited then append i

#For DLS:
#’get_user_input’ is a placeholder for obtaining user input.
#’node is goal’ checks  if the current node is equal to the goal node.
#’depth_limit is 0’ checks if the depth limit has been reached.
#The ‘graph’ is represented as an adjacency list.
# The ‘recursive_dls’ function explores the graph recursively until it finds the goal or reaches the depth limit.

 
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': [],
    'F': []
}

visited = []  # List for visited nodes
queue = []    # Initialize a queue

def bfs(visited, graph, node):  # Function for BFS
    visited.append(node)
    queue.append(node)

    while queue:  # Creating a loop to visit each node
        m = queue.pop(0)
        print(m, end=" ")

        for neighbor in graph[m]:
            if neighbor not in visited:
                visited.append(neighbor)
                queue.append(neighbor)

start_node = 'A'
print(f"Following is the Breadth-First Search starting from node '{start_node}':")
bfs(visited, graph, start_node)  # Function call
print("\nVisited nodes:", visited)

def dls(node, goal, depth_limit, graph, current_depth=0):
    visited = set()
    return recursive_dls(visited, node, goal, depth_limit, graph, current_depth)

def recursive_dls(visited, node, goal, depth_limit, graph, current_depth):
    if node == goal:
        return True
    elif depth_limit == 0:
        return False
    else:
        visited.add(node)
        print(f"Visiting node {node} at depth {current_depth}")
        if node in graph:
            for child in graph[node]:
                if child not in visited and recursive_dls(visited, child, goal, depth_limit - 1, graph, current_depth + 1):
                    return True
        return False

start_node = 'A'
goal_node = 'F'
depth_limit = 5  # Set the depth limit here

print(f"\nPerforming Depth-Limited Search from node '{start_node}' to node '{goal_node}' with depth limit {depth_limit}:")
result = dls(start_node, goal_node, depth_limit, graph)
print("Path exists:", result)
 

Let's break down the code step by step, explaining each part:

Certainly! Let's break down the code and its functionality step by step:

1. **Graph Representation**:
   - The `graph` variable represents a graph using an adjacency list format. It's a dictionary where each key represents a node, and the corresponding value is a list of its neighboring nodes.

2. **Breadth-First Search (BFS)**:
   - The `bfs` function performs a Breadth-First Search traversal starting from a given node.
   - It uses a queue to keep track of nodes to visit.
   - The function starts from the specified start node, appends it to the `visited` list, and adds it to the `queue`.
   - Then, it enters a loop where it dequeues a node from the `queue`, prints it, and adds its unvisited neighbors to the `queue` and `visited` list.
   - This process continues until the `queue` is empty, meaning all reachable nodes have been visited.

3. **Depth-Limited Search (DLS)**:
   - The `dls` function performs a Depth-Limited Search from a start node to a goal node with a specified depth limit.
   - It uses recursion to explore the graph up to a certain depth.
   - The function starts by calling the `recursive_dls` function with the initial parameters.
   - The `recursive_dls` function recursively explores the graph, checking each node's children up to a certain depth limit.
   - If the goal node is found within the depth limit, the function returns `True`; otherwise, it returns `False`.
   - During the search, the function prints a message whenever it visits a node, along with its current depth level.

4. **Main Execution**:
   - The main part of the code sets the start node, goal node, and depth limit.
   - It then calls the `dls` function to perform a Depth-Limited Search from the start node to the goal node with the specified depth limit.
   - Finally, it prints whether a path exists from the start node to the goal node within the depth limit.

This code demonstrates two graph traversal algorithms, BFS and DLS, and provides insight into how these algorithms explore a graph to find paths between nodes.
