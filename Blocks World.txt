class Block:
    def __init__(self, name):
        self.name = name
        self.on = None
        self.clear = True
        self.ontable = True

    def __repr__(self):
        return self.name


class BlocksWorldPlanner:
    def __init__(self, initial_state, goal_state):
        self.initial_state = initial_state
        self.goal_state = goal_state
        self.goal_stack = []
        self.actions = []
        self.blocks = {}

    def run(self):
        self.parse_initial_state()
        self.goal_stack.append(self.goal_state)
        while self.goal_stack:
            goal = self.goal_stack[-1]
            if isinstance(goal, str):
                if goal.startswith('ON'):
                    self.handle_on_goal(goal)
                elif goal.startswith('ONTABLE'):
                    self.handle_ontable_goal(goal)
                elif goal.startswith('CLEAR'):
                    self.handle_clear_goal(goal)
            elif isinstance(goal, Block):
                self.handle_block_goal(goal)
        print("Actions:")
        for action in self.actions:
            print(action)

    def parse_initial_state(self):
        for statement in self.initial_state.split(' ∧ '):
            if statement.startswith('ON'):
                block1, block2 = statement[3:-1].split(',')
                self.blocks[block1].on = self.blocks[block2]
                self.blocks[block1].clear = False
                self.blocks[block2].clear = False
            elif statement.startswith('ONTABLE'):
                block = statement[8:]
                self.blocks[block].ontable = True
                self.blocks[block].clear = False
            elif statement.startswith('CLEAR'):
                block = statement[6:]
                self.blocks[block].clear = True
            elif statement == 'ARMEMPTY':
                pass

    def handle_on_goal(self, goal):
        block1, block2 = goal[3:-1].split(',')
        if self.blocks[block1].on == self.blocks[block2]:
            self.goal_stack.pop()
        else:
            self.goal_stack.append(self.blocks[block1].on)

    def handle_ontable_goal(self, goal):
        block = goal[8:]
        if self.blocks[block].ontable:
            self.goal_stack.pop()
        else:
            self.goal_stack.append(block)

    def handle_clear_goal(self, goal):
        block = goal[6:]
        if self.blocks[block].clear:
            self.goal_stack.pop()
        else:
            for b in self.blocks.values():
                if b.clear:
                    self.goal_stack.append(b)
                    break

    def handle_block_goal(self, goal):
        if goal.clear and goal.ontable:
            self.goal_stack.pop()
        elif goal.clear:
            self.goal_stack.append("ONTABLE({})".format(goal.name))
        elif goal.ontable:
            self.goal_stack.append("CLEAR({})".format(goal.name))
        else:
            self.goal_stack.append("CLEAR({})".format(goal.name))
            self.goal_stack.append("ONTABLE({})".format(goal.name))
        if goal.on:
            self.goal_stack.append("ON({}, {})".format(goal.on.name, goal.name))

    def add_action(self, action):
        self.actions.append(action)

    def move(self, block, source, destination):
        self.add_action("Move({}, {}, {})".format(block, source, destination))
        if source == 'ARM':
            self.blocks[block].ontable = False
        else:
            self.blocks[source].on = None
            self.blocks[source].clear = True
        if destination == 'ARM':
            self.blocks[block].ontable = True


planner = BlocksWorldPlanner("A on B, C on TABLE, D on table", "C on A, B on D, A on TABLE, D on TABLE")
planner.run()

# Print the actions
print("Actions:")
for action in planner.actions:
    print(action)



This code implements a simple planner for a blocks world problem using a goal stack approach. Let's break down the code and explain each part in detail:

1. **Block Class**:
    - This class represents a block in the world. Each block has attributes like its name, whether it is on top of another block (`on`), whether it is clear (`clear`), and whether it is on the table (`ontable`).
    - The `__init__` method initializes these attributes, and the `__repr__` method returns the name of the block when it is printed.

2. **BlocksWorldPlanner Class**:
    - This class represents the planner for the blocks world problem.
    - It takes initial and goal states as input when instantiated.
    - It has attributes like `goal_stack` (stack to hold goals), `actions` (list to hold actions), and `blocks` (dictionary to hold blocks).
    - The `run` method is the main method that executes the planner.
    
3. **Parsing Initial State** (`parse_initial_state` method):
    - This method parses the initial state provided as input to the planner.
    - It splits the initial state string into individual statements separated by '∧'.
    - For each statement, it checks whether it indicates that a block is on another block, on the table, clear, or if the arm is empty.
    - It updates the attributes of the blocks accordingly.

4. **Handling Goal Statements**:
    - Methods like `handle_on_goal`, `handle_ontable_goal`, and `handle_clear_goal` handle different types of goal statements.
    - They check whether the goal is already satisfied and pop it from the goal stack if it is, or add sub-goals if it's not satisfied.
    - For example, `handle_on_goal` checks if a block is already on another block, and if not, it adds a sub-goal to achieve that.

5. **Handling Block Goals** (`handle_block_goal` method):
    - This method handles goals related to individual blocks.
    - It adds sub-goals to ensure that the block is either clear or on the table, depending on the goal.

6. **Adding Actions** (`add_action` method):
    - This method adds an action to the list of actions.
    - It is called when a block is moved from one place to another.

7. **Moving Blocks** (`move` method):
    - This method simulates moving a block from one place to another.
    - It updates the attributes of the blocks involved in the move.
    
8. **Running the Planner** (`run` method):
    - This method is called to execute the planner.
    - It parses the initial state, initializes the goal stack with the goal state, and then iteratively pops goals from the stack and handles them until the stack is empty.
    - After execution, it prints the list of actions performed to achieve the goal.

9. **Instantiating and Running the Planner**:
    - An instance of `BlocksWorldPlanner` is created with initial and goal states provided as strings.
    - The `run` method of the planner is called to execute the planner.
    - Finally, the list of actions performed by the planner is printed.

This code demonstrates a simple implementation of a planner for the blocks world problem using a goal stack approach. It efficiently plans a sequence of actions to achieve a specified goal state starting from an initial state. Let me know if you need further clarification on any part!
