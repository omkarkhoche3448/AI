import heapq

def isValid(state):
    M, C, B = state
    if M < 0 or C < 0 or M > 3 or C > 3:
        return False
    if C > M and M > 0:
        return False
    if (3 - C) > (3 - M) and (3 - M) > 0:
        return False
    return True

def successors(state):
    M, C, B = state
    moves = []
    if B == 1:
        if isValid((M, C - 2, 0)):
            moves.append((M, C - 2, 0))
        if isValid((M - 2, C, 0)):
            moves.append((M - 2, C, 0))
        if isValid((M - 1, C - 1, 0)):
            moves.append((M - 1, C - 1, 0))
        if isValid((M, C - 1, 0)):
            moves.append((M, C - 1, 0))
        if isValid((M - 1, C, 0)):
            moves.append((M - 1, C, 0))
    else:
        if isValid((M, C + 2, 1)):
            moves.append((M, C + 2, 1))
        if isValid((M + 2, C, 1)):
            moves.append((M + 2, C, 1))
        if isValid((M + 1, C + 1, 1)):
            moves.append((M + 1, C + 1, 1))
        if isValid((M, C + 1, 1)):
            moves.append((M, C + 1, 1))
        if isValid((M + 1, C, 1)):
            moves.append((M + 1, C, 1))
    return moves

def heuristic(state):
    M, C, B = state
    return (M + C - 2)//2

def astar(start_state):
    heap = []
    heapq.heappush(heap, (heuristic(start_state), 0, [start_state]))
    visited = set()
    while heap:
        _, cost, path = heapq.heappop(heap)
        current_state = path[-1]
        if current_state in visited:
            continue
        if current_state == (0, 0, 0):
            return path
        visited.add(current_state)
        for child in successors(current_state):
            if child not in visited:
                new_path = path + [child]
                new_cost = cost + 1
                heapq.heappush(heap, (new_cost + heuristic(child), new_cost, new_path))
    return None

def print_actions(path):
    for i in range(1, len(path)):
        prev_state = path[i-1]
        current_state = path[i]
        move = (current_state[0] - prev_state[0], current_state[1] - prev_state[1], current_state[2] - prev_state[2])
        if move[2] == 1:
            boat_side = "right"
        else:
            boat_side = "left"
        missionaries = abs(move[0])
        cannibals = abs(move[1])
        if missionaries == 0:
            if cannibals == 1:
                print(f"Move 1 cannibal to the {boat_side} side")
            else:
                print(f"Move {cannibals} cannibals to the {boat_side} side")
        elif cannibals == 0:
            if missionaries == 1:
                print(f"Move 1 missionary to the {boat_side} side")
            else:
                print(f"Move {missionaries} missionaries to the {boat_side} side")
        else:
            print(f"Move {missionaries} missionaries and {cannibals} cannibals to the {boat_side} side")

start_state = 3, 3, 1
solution = astar(start_state)
if solution:
    print("Solution found!")
    print_actions(solution)

    print("Everyone reached to other side of the bank :-) ")
else:
    print("No solution found.")


Explaination:

Certainly! Let's break down the provided code step by step:

1. Importing Libraries:
   - `import heapq`: This imports the `heapq` module, which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.

2. Helper Functions:
   - `isValid(state)`: This function checks if a given state is valid according to the problem constraints. It returns `True` if the state is valid, otherwise `False`.
   - `successors(state)`: This function generates all possible valid successor states from the given state. It returns a list of valid successor states.
   - `heuristic(state)`: This function calculates the heuristic value for a given state. The heuristic used here is the sum of missionaries and cannibals on the left bank minus 2, divided by 2.

3. A* Search Algorithm:
   - `astar(start_state)`: This function implements the A* search algorithm to find the optimal solution from the start state to the goal state. It returns the path from the start state to the goal state if a solution is found, otherwise `None`.
     - It initializes a priority queue (`heap`) and pushes the start state with its heuristic value and cost (distance from the start state) to the queue.
     - It maintains a set (`visited`) to keep track of visited states.
     - It iterates until the priority queue is empty:
       - It pops the state with the lowest total cost (heuristic value + actual cost) from the priority queue.
       - If the current state is the goal state, it returns the path.
       - Otherwise, it adds the current state to the visited set and generates its successor states.
       - For each successor, it calculates the new cost and pushes it to the priority queue if it hasn't been visited before.

4. Printing Actions:
   - `print_actions(path)`: This function prints the sequence of actions required to reach from the start state to the goal state based on the provided path.
     - It iterates over the path and calculates the move (difference) between consecutive states.
     - It then prints the corresponding action for each move, such as moving missionaries or cannibals to the left or right bank.

5. Main Code Execution:
   - It sets the `start_state` to `(3, 3, 1)`, representing three missionaries, three cannibals, and the boat on the left bank.
   - It calls the `astar` function with the `start_state` to find the optimal solution.
   - If a solution is found, it prints the sequence of actions using `print_actions`.
   - If no solution is found, it prints "No solution found."

Overall, this code implements the A* search algorithm to solve the missionaries and cannibals problem and provides functions to validate states, generate successor states, calculate heuristic values, and print actions. Let me know if you need further clarification on any part!
Certainly! Let's delve into each function in more detail:

1. isValid(state):
   - Purpose: This function checks if a given state is valid according to the problem constraints.
   - Input: The `state` parameter represents the current state of the problem and is a tuple containing three integers: `(M, C, B)`, where `M` represents the number of missionaries on the left bank, `C` represents the number of cannibals on the left bank, and `B` represents the boat's position (1 for the right bank, 0 for the left bank).
   - Output: The function returns `True` if the state is valid and `False` otherwise.
   - Explanation:
     - It checks if the number of missionaries and cannibals is within the valid range of 0 to 3 (inclusive). If any value is outside this range, the state is invalid.
     - It ensures that there are no more cannibals than missionaries on either bank. This is to prevent the cannibals from outnumbering the missionaries on any bank, which would lead to the missionaries being eaten.
     - It also ensures that there are no more cannibals than missionaries on the opposite bank. This constraint prevents a situation where, if there are more cannibals than missionaries on the opposite bank, the missionaries would be outnumbered and eaten if the boat moves to that side without any missionaries present.
   - Example: If `state = (2, 1, 1)`, representing 2 missionaries, 1 cannibal, and the boat on the right bank, the function would return `True` because this state satisfies all constraints.

2. successors(state):
   - Purpose: This function generates all possible valid successor states from a given state.
   - Input: The `state` parameter represents the current state of the problem, similar to the `isValid` function.
   - Output: It returns a list of tuples, where each tuple represents a valid successor state.
   - Explanation:
     - It considers all possible combinations of moving missionaries and cannibals across the river, either one or two at a time.
     - For each possible move, it first checks if the resulting state would be valid using the `isValid` function.
     - If the state is valid, it adds it to the list of successor states.
     - The function generates successor states based on whether the boat is on the left bank or the right bank, as moving missionaries and cannibals requires the boat to be on the same bank.
   - Example: If `state = (2, 2, 0)`, representing 2 missionaries, 2 cannibals, and the boat on the left bank, the function might return `[(2, 1, 1), (1, 2, 1)]`, indicating two possible moves: moving one cannibal to the right bank or moving one missionary to the right bank.

3. heuristic(state):
   - Purpose: This function calculates the heuristic value for a given state.
   - Input: The `state` parameter represents the current state of the problem, similar to the previous functions.
   - Output: It returns an integer representing the heuristic value for the state.
   - Explanation:
     - The heuristic function provides an estimate of how close the current state is to the goal state, guiding the search algorithm towards finding a solution more efficiently.
     - In this implementation, the heuristic value is calculated by taking the sum of missionaries and cannibals on the left bank and subtracting 2, then dividing the result by 2.
     - This heuristic value aims to approximate the minimum number of moves required to reach the goal state by estimating the number of moves needed to move all missionaries and cannibals to the right bank.
   - Example: If `state = (2, 2, 0)`, the function might return `(2 + 2 - 2) // 2 = 1`, indicating that the heuristic value for this state is 1.

4. astar(start_state):
   - Purpose: This function implements the A* search algorithm to find the optimal solution from the start state to the goal state.
   - Input: The `start_state` parameter represents the initial state of the problem.
   - Output: It returns a list of tuples representing the sequence of states from the start state to the goal state (if a solution is found), or `None` if no solution is found.
   - Explanation:
     - The A* search algorithm combines the benefits of both Dijkstra's algorithm (which ensures the shortest path) and greedy best-first search (which uses heuristics to guide the search).
     - It uses a priority queue to explore the most promising paths first, based on the total cost (actual cost + heuristic value) associated with each state.
     - The function iteratively explores states until it reaches the goal state or exhausts all possible paths.
     - At each step, it selects the state with the lowest total cost from the priority queue, explores its successors, and updates the priority queue accordingly.
   - Example: If the solution path is `[(3, 3, 1), (3, 1, 0), ..., (0, 0, 0)]`, representing a sequence of states from the start state to the goal state, the function would return this list.

5. print_actions(path):
   - Purpose: This function prints the sequence of actions required to reach from the start state to the goal state based on the provided path.
   - Input: The `path` parameter is a list of tuples representing the sequence of states.
   - Output: It prints the sequence of actions to the console.
   - Explanation:
     - It iterates over the path and calculates the move (difference) between consecutive states.
     - For each move, it determines whether missionaries or cannibals are being moved and in which direction (left or right bank).
     - It then prints the corresponding action for each move, such as moving missionaries or cannibals to the left or right bank.
   - Example: If the path is `[(3, 3, 1), (3, 1, 0), ..., (0, 0, 0)]`, the function might print:
     ```
     Move 2 missionaries and 0 cannibals to the left side
     Move 0 missionaries and 2 cannibals to the right side
     ...
     Everyone reached the other side of the bank! :-)
     ```

These functions collectively solve the missionaries and cannibals problem using the A* search algorithm, ensuring that all generated states adhere to the problem constraints and guiding the search towards finding an optimal solution efficiently. Let me know if you have any further questions!
