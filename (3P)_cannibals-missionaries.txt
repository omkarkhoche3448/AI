import heapq

def isValid(state):
    M, C, B = state
    if M < 0 or C < 0 or M > 3 or C > 3:
        return False
    if C > M and M > 0:
        return False
    if (3 - C) > (3 - M) and (3 - M) > 0:
        return False
    return True

def successors(state):
    M, C, B = state
    moves = []
    if B == 1:
        if isValid((M, C - 2, 0)):
            moves.append((M, C - 2, 0))
        if isValid((M - 2, C, 0)):
            moves.append((M - 2, C, 0))
        if isValid((M - 1, C - 1, 0)):
            moves.append((M - 1, C - 1, 0))
        if isValid((M, C - 1, 0)):
            moves.append((M, C - 1, 0))
        if isValid((M - 1, C, 0)):
            moves.append((M - 1, C, 0))
    else:
        if isValid((M, C + 2, 1)):
            moves.append((M, C + 2, 1))
        if isValid((M + 2, C, 1)):
            moves.append((M + 2, C, 1))
        if isValid((M + 1, C + 1, 1)):
            moves.append((M + 1, C + 1, 1))
        if isValid((M, C + 1, 1)):
            moves.append((M, C + 1, 1))
        if isValid((M + 1, C, 1)):
            moves.append((M + 1, C, 1))
    return moves

def heuristic(state):
    M, C, B = state
    return (M + C - 2)//2

def astar(start_state):
    heap = []
    heapq.heappush(heap, (heuristic(start_state), 0, [start_state]))
    visited = set()
    while heap:
        _, cost, path = heapq.heappop(heap)
        current_state = path[-1]
        if current_state in visited:
            continue
        if current_state == (0, 0, 0):
            return path
        visited.add(current_state)
        for child in successors(current_state):
            if child not in visited:
                new_path = path + [child]
                new_cost = cost + 1
                heapq.heappush(heap, (new_cost + heuristic(child), new_cost, new_path))
    return None

def print_actions(path):
    for i in range(1, len(path)):
        prev_state = path[i-1]
        current_state = path[i]
        move = (current_state[0] - prev_state[0], current_state[1] - prev_state[1], current_state[2] - prev_state[2])
        if move[2] == 1:
            boat_side = "right"
        else:
            boat_side = "left"
        missionaries = abs(move[0])
        cannibals = abs(move[1])
        if missionaries == 0:
            if cannibals == 1:
                print(f"Move 1 cannibal to the {boat_side} side")
            else:
                print(f"Move {cannibals} cannibals to the {boat_side} side")
        elif cannibals == 0:
            if missionaries == 1:
                print(f"Move 1 missionary to the {boat_side} side")
            else:
                print(f"Move {missionaries} missionaries to the {boat_side} side")
        else:
            print(f"Move {missionaries} missionaries and {cannibals} cannibals to the {boat_side} side")

start_state = 3, 3, 1
solution = astar(start_state)
if solution:
    print("Solution found!")
    print_actions(solution)

    print("Everyone reached to other side of the bank :-) ")
else:
    print("No solution found.")


Explaination:

Certainly! Let's break down the provided code step by step:

1. Importing Libraries:
   - `import heapq`: This imports the `heapq` module, which provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.

2. Helper Functions:
   - `isValid(state)`: This function checks if a given state is valid according to the problem constraints. It returns `True` if the state is valid, otherwise `False`.
   - `successors(state)`: This function generates all possible valid successor states from the given state. It returns a list of valid successor states.
   - `heuristic(state)`: This function calculates the heuristic value for a given state. The heuristic used here is the sum of missionaries and cannibals on the left bank minus 2, divided by 2.

3. A* Search Algorithm:
   - `astar(start_state)`: This function implements the A* search algorithm to find the optimal solution from the start state to the goal state. It returns the path from the start state to the goal state if a solution is found, otherwise `None`.
     - It initializes a priority queue (`heap`) and pushes the start state with its heuristic value and cost (distance from the start state) to the queue.
     - It maintains a set (`visited`) to keep track of visited states.
     - It iterates until the priority queue is empty:
       - It pops the state with the lowest total cost (heuristic value + actual cost) from the priority queue.
       - If the current state is the goal state, it returns the path.
       - Otherwise, it adds the current state to the visited set and generates its successor states.
       - For each successor, it calculates the new cost and pushes it to the priority queue if it hasn't been visited before.

4. Printing Actions:
   - `print_actions(path)`: This function prints the sequence of actions required to reach from the start state to the goal state based on the provided path.
     - It iterates over the path and calculates the move (difference) between consecutive states.
     - It then prints the corresponding action for each move, such as moving missionaries or cannibals to the left or right bank.

5. Main Code Execution:
   - It sets the `start_state` to `(3, 3, 1)`, representing three missionaries, three cannibals, and the boat on the left bank.
   - It calls the `astar` function with the `start_state` to find the optimal solution.
   - If a solution is found, it prints the sequence of actions using `print_actions`.
   - If no solution is found, it prints "No solution found."

Overall, this code implements the A* search algorithm to solve the missionaries and cannibals problem and provides functions to validate states, generate successor states, calculate heuristic values, and print actions. Let me know if you need further clarification on any part!